export declare type Protocol = "http" | "https";
export declare class Client<R extends object = any> {
    private host;
    private port;
    private user;
    private password;
    private protocol;
    /**
     * Virtual resources object.
     *
     * Using this, it's possible to do:
     *   client.resources.resource_name.procedureName()
     *
     * instead of:
     *   client.call("resource_name", "procedureName")
     *
     * @type {R}
     * @memberof Client
     */
    resources: R;
    /**
     * Creates an instance of Client.
     * @param {string} [host="127.0.0.1"] Domain name or IP address of the MTA server
     * @param {number} [port=22005] Port of the MTA server
     * @param {string} [user=null] Username used for authentication during procedure calls
     * @param {string} [password=null] Password used for authentication during procedure calls
     * @param {Protocol} [protocol="http"] Web protocol used for procedure calls
     *
     * @memberof Client
     */
    constructor(host?: string, port?: number, user?: string, password?: string, protocol?: Protocol);
    /**
     * Performs a call to the remote server.
     *
     * @template A Response
     * @template T Resource name
     * @template R Resources interface
     * @param {T} resourceName Name of the resource to call the procedure from
     * @param {keyof R[T]} procedureName Name of the procedure from the resource to call
     * @param {...any[]} args Parameters to pass to the procedure being called
     * @returns {Promise<A>} Result of the procedure call
     *
     * @memberof Client
     */
    call<A, T extends keyof R = keyof R>(resourceName: T, procedureName: keyof R[T], ...args: any[]): Promise<A>;
    /**
     * URI of the MTA server's HTTP server
     *
     * @readonly
     * @private
     * @type {string}
     * @memberof Client
     */
    private readonly serverUri;
    /**
     * Internal user agent
     *
     * @readonly
     * @private
     * @type {string}
     * @memberof Client
     */
    private readonly userAgent;
    /**
     * Request authentication options, or undefined
     * when username or password is missing.
     *
     * @readonly
     * @private
     * @type {AuthOptions}
     * @memberof Client
     */
    private readonly authOptions;
    /**
     * Creates a proxy for handling virtual resources.
     *
     * @private
     * @returns {object}
     *
     * @memberof Client
     */
    private createResourcesProxy;
    /**
     * Creates a proxy for handling virtual procedures.
     *
     * @private
     * @param {string} resourceName
     * @returns {object}
     *
     * @memberof Client
     */
    private createProceduresProxy;
}
