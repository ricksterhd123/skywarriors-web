"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_promise_1 = require("request-promise");
class Client {
    /**
     * Creates an instance of Client.
     * @param {string} [host="127.0.0.1"] Domain name or IP address of the MTA server
     * @param {number} [port=22005] Port of the MTA server
     * @param {string} [user=null] Username used for authentication during procedure calls
     * @param {string} [password=null] Password used for authentication during procedure calls
     * @param {Protocol} [protocol="http"] Web protocol used for procedure calls
     *
     * @memberof Client
     */
    constructor(host = "127.0.0.1", port = 22005, user = null, password = null, protocol = "http") {
        this.host = host;
        this.port = port;
        this.user = user;
        this.password = password;
        this.protocol = protocol;
        /**
         * Virtual resources object.
         *
         * Using this, it's possible to do:
         *   client.resources.resource_name.procedureName()
         *
         * instead of:
         *   client.call("resource_name", "procedureName")
         *
         * @type {R}
         * @memberof Client
         */
        this.resources = {};
        this.resources = this.createResourcesProxy();
    }
    /**
     * Performs a call to the remote server.
     *
     * @template A Response
     * @template T Resource name
     * @template R Resources interface
     * @param {T} resourceName Name of the resource to call the procedure from
     * @param {keyof R[T]} procedureName Name of the procedure from the resource to call
     * @param {...any[]} args Parameters to pass to the procedure being called
     * @returns {Promise<A>} Result of the procedure call
     *
     * @memberof Client
     */
    call(resourceName, procedureName, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const uri = `${this.serverUri}/${resourceName}/call/${procedureName}`;
            const result = yield request_promise_1.post({
                uri,
                auth: this.authOptions,
                headers: {
                    "Content-type": "application/json",
                    "User-Agent": this.userAgent,
                },
                json: true,
                body: args,
            });
            return result[0];
        });
    }
    /**
     * URI of the MTA server's HTTP server
     *
     * @readonly
     * @private
     * @type {string}
     * @memberof Client
     */
    get serverUri() {
        return `${this.protocol}://${this.host}:${this.port}`;
    }
    /**
     * Internal user agent
     *
     * @readonly
     * @private
     * @type {string}
     * @memberof Client
     */
    get userAgent() {
        return `MTA:SA WEB client on Node.js ${process.version} (node-mtasa)`;
    }
    /**
     * Request authentication options, or undefined
     * when username or password is missing.
     *
     * @readonly
     * @private
     * @type {AuthOptions}
     * @memberof Client
     */
    get authOptions() {
        let opts;
        if (this.user && this.password) {
            opts = {
                user: this.user,
                password: this.password,
            };
        }
        return opts;
    }
    /**
     * Creates a proxy for handling virtual resources.
     *
     * @private
     * @returns {object}
     *
     * @memberof Client
     */
    createResourcesProxy() {
        return new Proxy(this.resources, {
            get: (target, resourceName) => {
                return this.createProceduresProxy(resourceName);
            },
        });
    }
    /**
     * Creates a proxy for handling virtual procedures.
     *
     * @private
     * @param {string} resourceName
     * @returns {object}
     *
     * @memberof Client
     */
    createProceduresProxy(resourceName) {
        return new Proxy({}, {
            get: (target, procedureName) => {
                return (...args) => {
                    return this.call(resourceName, procedureName, ...args);
                };
            },
        });
    }
}
exports.Client = Client;
